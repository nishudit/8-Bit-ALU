$date
	Sat May 20 02:25:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module testbench $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " carryOut $end
$var reg 1 # carryIn $end
$var reg 8 $ operandA [7:0] $end
$var reg 8 % operandB [7:0] $end
$scope module adder $end
$var wire 1 # carryIn $end
$var wire 8 & operandA [7:0] $end
$var wire 8 ' operandB [7:0] $end
$var wire 8 ( sum [7:0] $end
$var wire 1 " carryOut $end
$var wire 8 ) carry [7:0] $end
$scope begin gen[1] $end
$var parameter 2 * i $end
$scope module inst $end
$var wire 1 + carryIn $end
$var wire 1 , carryOut $end
$var wire 1 - operandA $end
$var wire 1 . operandB $end
$var wire 1 / sum $end
$upscope $end
$upscope $end
$scope begin gen[2] $end
$var parameter 3 0 i $end
$scope module inst $end
$var wire 1 1 carryIn $end
$var wire 1 2 carryOut $end
$var wire 1 3 operandA $end
$var wire 1 4 operandB $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$scope begin gen[3] $end
$var parameter 3 6 i $end
$scope module inst $end
$var wire 1 7 carryIn $end
$var wire 1 8 carryOut $end
$var wire 1 9 operandA $end
$var wire 1 : operandB $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope begin gen[4] $end
$var parameter 4 < i $end
$scope module inst $end
$var wire 1 = carryIn $end
$var wire 1 > carryOut $end
$var wire 1 ? operandA $end
$var wire 1 @ operandB $end
$var wire 1 A sum $end
$upscope $end
$upscope $end
$scope begin gen[5] $end
$var parameter 4 B i $end
$scope module inst $end
$var wire 1 C carryIn $end
$var wire 1 D carryOut $end
$var wire 1 E operandA $end
$var wire 1 F operandB $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$scope begin gen[6] $end
$var parameter 4 H i $end
$scope module inst $end
$var wire 1 I carryIn $end
$var wire 1 J carryOut $end
$var wire 1 K operandA $end
$var wire 1 L operandB $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$scope begin gen[7] $end
$var parameter 4 N i $end
$scope module inst $end
$var wire 1 O carryIn $end
$var wire 1 P carryOut $end
$var wire 1 Q operandA $end
$var wire 1 R operandB $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$scope module fa[0] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[1] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[2] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[3] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[4] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[5] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[6] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$scope module fa[7] $end
$var wire 1 # carryIn $end
$var wire 1 T carryOut $end
$var wire 1 U operandA $end
$var wire 1 V operandB $end
$var wire 1 W sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 N
b110 H
b101 B
b100 <
b11 6
b10 0
b1 *
$end
#0
$dumpvars
1W
1V
0U
0T
1S
0R
1Q
0P
0O
1M
1L
0K
0J
0I
1G
0F
1E
0D
0C
1A
1@
0?
0>
0=
1;
0:
19
08
07
15
14
03
02
01
1/
0.
1-
0,
0+
b0 )
b11111111 (
b1010101 '
b10101010 &
b1010101 %
b10101010 $
0#
0"
b11111111 !
$end
#10
1=
18
0;
17
12
05
11
1,
0/
1+
1A
0M
0G
0S
b10000 !
b10000 (
0W
b1111 )
1T
04
0@
0L
13
0E
0Q
1U
b1 %
b1 '
b1111 $
b1111 &
#20
1G
1C
b111000 !
b111000 (
1;
b11111 )
1>
1.
14
1:
1@
0-
03
1?
b11111 %
b11111 '
b11001 $
b11001 &
#30
